name: Update README with new Pok√©mon team

on:
  schedule:
    - cron: '0 0 * * *' # Esto se ejecuta todos los d√≠as a la medianoche UTC
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin main

      - name: Update Pok√©mon Team (images + names) using jsDelivr CDN
        run: |
          python3 - <<'PY'
          """
          Genera un equipo de 6 pok√©mon aleatorios con su imagen y nombre.
          Reemplaza el bloque entre:
            <!-- POKEMON_TEAM_START -->
            ...
            <!-- POKEMON_TEAM_END -->
          Si no existe, hace fallback reemplazando la primera <img width="30%">,
          y si tampoco existe, anexa el bloque al final del README.
          Usa jsDelivr para servir las im√°genes (mejor cache, menos 429).
          """
          import random, re, json, urllib.request, urllib.error, time

          README = "README.md"
          POKEAPI_URL = "https://pokeapi.co/api/v2/pokemon/{}"
          # Cambiado a jsDelivr para evitar l√≠mites frecuentes en raw.githubusercontent.com
          SPRITE_URL = "https://cdn.jsdelivr.net/gh/PokeAPI/sprites@master/sprites/pokemon/{}.png"

          def fetch_name(pokemon_id, timeout=10):
              try:
                  req = urllib.request.Request(POKEAPI_URL.format(pokemon_id), headers={"User-Agent": "github-actions-pokemon-bot/1.0"})
                  with urllib.request.urlopen(req, timeout=timeout) as resp:
                      data = json.load(resp)
                      name = data.get("name", "")
                      return name.capitalize() if name else f"#{pokemon_id}"
              except Exception:
                  return f"#{pokemon_id}"

          def gen_team_html(ids, img_width="80px"):
              parts = []
              for pid in ids:
                  name = fetch_name(pid)
                  img = SPRITE_URL.format(pid)
                  part = (
                      f'<figure style="display:inline-block; margin:6px; text-align:center;">'
                      f'<img src="{img}" style="width:{img_width}; display:block; margin:0 auto;" />'
                      f'<figcaption style="font-size:0.8rem; margin-top:4px;">{name}</figcaption>'
                      f'</figure>'
                  )
                  parts.append(part)
                  time.sleep(0.1)  # peque√±a pausa para no sobrecargar pokeapi si hay muchos requests
              return " ".join(parts)

          with open(README, "r", encoding="utf-8") as f:
              text = f.read()

          # Generar 6 IDs √∫nicos entre 1 y 1025
          ids = random.sample(range(1, 1026), 6)
          team_html = gen_team_html(ids)

          start_marker = "<!-- POKEMON_TEAM_START -->"
          end_marker = "<!-- POKEMON_TEAM_END -->"

          if start_marker in text and end_marker in text:
              new_block = f"{start_marker}\n{team_html}\n{end_marker}"
              text = re.sub(re.escape(start_marker) + r".*?" + re.escape(end_marker), new_block, text, flags=re.S)
              action = "replaced between markers"
          else:
              # Fallback: reemplazar la PRIMERA etiqueta <img ... width="30%" ...>
              new_s, n = re.subn(r'<img[^>]*width="30%"[^>]*>', team_html, text, count=1)
              if n:
                  text = new_s
                  action = "replaced first <img width=\"30%\"> as fallback"
              else:
                  # Si tampoco se encontr√≥ nada, anexar al final con marcadores
                  new_block = f"\n{start_marker}\n{team_html}\n{end_marker}\n"
                  text = text + new_block
                  action = "appended team at EOF"

          with open(README, "w", encoding="utf-8") as f:
              f.write(text)

          print("Done:", action)
          print("Team IDs:", ids)
          PY

      - name: Commit changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "feat(image):üåà New pokemon team (with names, via jsDelivr)"
            git push origin HEAD:${{ github.ref_name }}
          fi
          else
            git commit -m "feat(image):üåà New pokemon team"
            git push origin HEAD:${{ github.ref_name }}
          fi
